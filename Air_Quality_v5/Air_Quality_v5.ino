/*
 Intelligent system for indoor air quality control
 control fan motor outdoor and Air mitsubishi
 Automatic AC Temperature Controller using Arduino
 Arduino Smart Home Automation
 sensor  
 A0     -MQ2 gas
 A1     rx2 -CO2 MH-Z14A
 A2     humidity
 A3     Analog temp ,
 pin 9  IR LED
 i2c    OLED
 i2c    Tiny RTC
 spi    microSD card
 tx3    esp8266 ,data 4 byte
*/
#include <SPI.h>
#include <Wire.h>
#include <SD.h>
#include <IRremote.h>
IRsend irsend;
File myFile;
////////////////////////////////////////////////////////////////////////
int khz = 38; // 38kHz carrier frequency for the NEC protocol
int airsend = 0;
uint16_t irSignal30[583] = {3402, 1754,  384, 1336,  410, 1320,  384, 478,  386, 480,  384, 478,  354, 1368,  384, 478,  384, 480,  384, 1338,  384, 1338,  384, 478,  386, 1338,  386, 476,  356, 512,  354, 1370,  378, 1346,  384, 482,  378, 1350,  354, 1372,  386, 478,  384, 478,  386, 1336,  384, 480,  386, 478,  356, 1372,  384, 480,  356, 512,  384, 478,  384, 482,  384, 478,  386, 478,  384, 478,  356, 510,  404, 464,  386, 480,  354, 512,  386, 482,  386, 480,  378, 494,  384, 480,  384, 482,  386, 482,  384, 478,  386, 482,  384, 480,  386, 1338,  384, 478,  386, 478,  384, 480,  384, 480,  384, 476,  386, 1336,  404, 1324,  384, 478,  384, 478,  408, 464,  386, 480,  386, 1336,  384, 1334,  354, 1372,  384, 478,  384, 478,  360, 506,  386, 480,  386, 482,  354, 1368,  384, 1338,  384, 484,  382, 1340,  384, 1336,  354, 510,  386, 478,  384, 482,  354, 512,  378, 490,  386, 478,  376, 488,  386, 478,  384, 1342,  384, 478,  386, 480,  384, 482,  384, 478,  384, 478,  384, 478,  386, 476,  386, 1336,  378, 486,  380, 492,  384, 476,  386, 478,  384, 478,  384, 478,  354, 512,  386, 476,  384, 480,  384, 478,  384, 482,  384, 476,  384, 480,  384, 478,  384, 480,  384, 480,  384, 478,  386, 480,  384, 480,  384, 480,  356, 510,  378, 490,  354, 512,  354, 512,  384, 476,  384, 480,  384, 482,  356, 512,  378, 488,  386, 482,  386, 478,  384, 480,  376, 490,  384, 480,  386, 478,  378, 492,  386, 478,  384, 480,  384, 480,  386, 480,  384, 480,  384, 480,  386, 482,  384, 480,  380, 490,  384, 478,  440, 438,  384, 480,  386, 476,  378, 1346,  384, 480,  384, 476,  384, 478,  378, 1344,  356, 512,  356, 512,  386, 476,  384, 17146,  3516, 1776,  384, 1338,  384, 1336,  384, 480,  356, 510,  386, 482,  386, 1336,  384, 480,  356, 514,  384, 1338,  386, 1340,  384, 476,  386, 1340,  384, 480,  384, 480,  386, 1338,  384, 1342,  384, 476,  378, 1348,  382, 1342,  384, 482,  384, 480,  386, 1336,  384, 482,  384, 478,  386, 1338,  378, 486,  386, 480,  386, 478,  384, 478,  378, 490,  386, 478,  384, 478,  384, 482,  384, 478,  378, 486,  356, 510,  386, 478,  354, 510,  386, 478,  384, 480,  354, 510,  386, 478,  384, 478,  378, 490,  384, 480,  386, 1336,  384, 480,  386, 478,  386, 480,  386, 482,  384, 478,  440, 1294,  384, 1340,  384, 480,  384, 480,  386, 478,  384, 480,  378, 1348,  376, 1346,  354, 1370,  384, 480,  356, 510,  386, 478,  384, 480,  384, 480,  384, 1336,  384, 1334,  384, 480,  356, 1368,  386, 1338,  384, 478,  384, 482,  384, 492,  384, 478,  384, 480,  384, 482,  384, 478,  384, 480,  384, 1336,  376, 488,  384, 482,  356, 512,  378, 490,  384, 478,  378, 490,  386, 478,  384, 1342,  386, 478,  386, 480,  384, 484,  384, 478,  384, 480,  386, 478,  384, 478,  384, 482,  384, 478,  386, 480,  390, 472,  354, 512,  380, 490,  386, 478,  354, 508,  378, 486,  378, 490,  384, 478,  384, 480,  378, 488,  388, 478,  384, 476,  378, 492,  378, 488,  386, 476,  384, 478,  384, 482,  386, 474,  378, 490,  384, 478,  384, 480,  378, 486,  408, 464,  386, 478,  378, 490,  386, 480,  354, 514,  440, 440,  384, 480,  384, 482,  384, 476,  404, 466,  384, 478,  386, 478,  384, 478,  386, 480,  380, 490,  384, 480,  384, 482,  386, 1334,  384, 482,  384, 478,  384, 482,  384, 1338,  382, 490,  384, 480,  384, 482,  356};  // UNKNOWN B6ED6E37
uint16_t irSignal29[583] = {3346, 1810,  354, 1370,  372, 1358,  352, 508,  354, 512,  354, 508,  354, 1366,  324, 546,  356, 508,  354, 1368,  354, 1368,  346, 518,  348, 1382,  354, 514,  354, 508,  346, 1382,  354, 1366,  354, 506,  324, 1400,  356, 1366,  354, 510,  346, 520,  354, 1370,  356, 508,  354, 510,  324, 1398,  324, 544,  354, 508,  324, 546,  354, 506,  354, 510,  354, 508,  324, 546,  354, 508,  324, 542,  354, 510,  354, 508,  354, 508,  354, 512,  324, 548,  354, 508,  324, 542,  326, 542,  346, 522,  354, 510,  354, 510,  354, 1370,  354, 508,  354, 510,  356, 510,  354, 506,  354, 512,  354, 1366,  354, 1368,  354, 508,  346, 520,  380, 494,  354, 1366,  346, 522,  346, 1376,  324, 1400,  354, 510,  354, 508,  346, 522,  324, 544,  354, 510,  354, 1366,  352, 1366,  324, 544,  354, 1366,  354, 1364,  354, 512,  354, 510,  354, 512,  354, 510,  354, 512,  354, 510,  324, 542,  346, 520,  346, 1354,  368, 518,  346, 1378,  354, 512,  354, 1370,  354, 512,  354, 508,  354, 512,  324, 1400,  354, 508,  354, 508,  324, 544,  346, 522,  354, 508,  354, 510,  354, 516,  354, 510,  354, 510,  354, 510,  354, 512,  354, 508,  354, 512,  354, 514,  346, 522,  356, 506,  346, 520,  354, 510,  324, 542,  346, 518,  324, 544,  354, 510,  354, 510,  354, 508,  354, 514,  354, 508,  354, 512,  354, 512,  352, 512,  354, 510,  354, 510,  356, 508,  354, 508,  354, 508,  324, 542,  324, 542,  324, 544,  354, 506,  354, 508,  348, 518,  354, 510,  354, 506,  324, 546,  354, 508,  354, 508,  354, 508,  326, 544,  354, 508,  354, 510,  354, 1368,  374, 498,  346, 1378,  354, 510,  354, 1372,  352, 506,  354, 516,  354, 508,  326, 17146,  3550, 1752,  346, 1380,  346, 1388,  354, 508,  354, 514,  346, 522,  410, 1324,  324, 544,  324, 542,  354, 1370,  354, 1366,  354, 510,  354, 1370,  354, 508,  354, 506,  324, 1398,  324, 1400,  354, 512,  354, 1364,  348, 1382,  352, 510,  354, 514,  346, 1324,  398, 522,  354, 514,  354, 1366,  354, 520,  354, 510,  348, 522,  354, 508,  410, 468,  354, 510,  356, 506,  346, 522,  354, 512,  354, 510,  354, 508,  374, 494,  354, 508,  346, 520,  324, 544,  354, 512,  354, 512,  354, 508,  346, 520,  354, 510,  354, 1368,  376, 496,  354, 508,  354, 512,  354, 514,  354, 508,  354, 1370,  354, 1364,  354, 510,  354, 506,  354, 510,  354, 1368,  352, 510,  348, 1324,  408, 1368,  354, 512,  346, 524,  354, 508,  346, 522,  354, 506,  354, 1314,  408, 1370,  352, 516,  354, 1368,  356, 1364,  356, 510,  354, 508,  354, 510,  354, 510,  354, 510,  324, 542,  346, 522,  324, 542,  324, 1400,  346, 524,  354, 1368,  354, 514,  354, 1368,  354, 510,  354, 512,  354, 506,  346, 1378,  354, 512,  346, 520,  354, 512,  354, 506,  354, 510,  354, 510,  354, 510,  354, 510,  354, 510,  324, 546,  354, 510,  354, 512,  352, 512,  354, 508,  354, 510,  324, 542,  354, 510,  354, 512,  354, 510,  354, 512,  324, 550,  354, 508,  324, 542,  354, 508,  354, 514,  354, 512,  354, 508,  354, 512,  354, 510,  354, 512,  354, 512,  324, 544,  356, 508,  372, 498,  352, 508,  348, 520,  354, 508,  354, 510,  354, 506,  348, 518,  324, 552,  354, 508,  354, 510,  354, 510,  354, 512,  354, 510,  354, 510,  354, 510,  354, 508,  354, 1366,  356, 510,  346, 1378,  322, 550,  354, 1368,  354, 512,  356, 510,  356, 506,  346};  // UNKNOWN 31A86B36
uint16_t irSignal28[583] = {3348, 1808,  432, 1292,  374, 1356,  428, 434,  430, 434,  434, 428,  434, 1288,  324, 544,  430, 432,  424, 1298,  444, 1282,  324, 540,  432, 1286,  448, 424,  430, 434,  422, 1302,  422, 1314,  430, 434,  432, 1288,  432, 1290,  322, 542,  352, 510,  324, 1372,  380, 508,  324, 542,  324, 1398,  418, 448,  424, 440,  326, 546,  354, 506,  324, 542,  324, 538,  324, 546,  354, 508,  326, 544,  354, 508,  356, 508,  354, 510,  324, 544,  324, 548,  354, 508,  324, 544,  324, 544,  346, 520,  446, 416,  324, 542,  354, 1368,  354, 510,  324, 540,  356, 510,  356, 506,  354, 512,  354, 1368,  354, 1366,  434, 428,  348, 520,  382, 468,  380, 508,  348, 522,  354, 1366,  348, 1378,  324, 540,  356, 508,  324, 538,  354, 508,  354, 510,  354, 1362,  356, 1346,  380, 508,  356, 1340,  380, 1368,  354, 506,  346, 518,  324, 538,  324, 542,  346, 520,  324, 542,  326, 538,  354, 512,  324, 1400,  354, 510,  354, 1342,  380, 508,  354, 1368,  354, 508,  354, 510,  354, 508,  354, 1366,  356, 508,  356, 506,  448, 420,  324, 542,  354, 512,  354, 508,  326, 538,  348, 520,  348, 524,  354, 508,  324, 542,  354, 508,  354, 508,  354, 508,  324, 544,  322, 548,  354, 508,  324, 542,  324, 544,  346, 522,  448, 412,  326, 542,  354, 516,  324, 538,  324, 540,  354, 508,  324, 540,  354, 508,  324, 540,  354, 514,  346, 522,  354, 506,  346, 518,  324, 538,  324, 542,  346, 518,  324, 544,  324, 538,  354, 512,  324, 538,  326, 542,  452, 410,  354, 512,  354, 510,  448, 416,  450, 416,  324, 540,  354, 508,  324, 538,  324, 538,  324, 542,  324, 1400,  354, 512,  346, 1378,  354, 512,  354, 510,  326, 540,  346, 17292,  3518, 1782,  354, 1368,  354, 1368,  354, 510,  354, 510,  354, 510,  346, 1376,  346, 520,  324, 544,  354, 1366,  354, 1368,  354, 512,  324, 1400,  354, 510,  354, 506,  354, 1364,  434, 1288,  324, 540,  324, 1398,  346, 1376,  324, 548,  354, 508,  324, 1398,  354, 510,  324, 542,  354, 1368,  354, 510,  324, 540,  354, 508,  480, 394,  354, 510,  348, 520,  322, 542,  348, 522,  354, 510,  354, 512,  356, 508,  448, 418,  354, 510,  450, 414,  450, 410,  346, 522,  354, 510,  324, 538,  324, 540,  374, 492,  356, 1366,  348, 520,  380, 492,  354, 508,  348, 520,  450, 416,  322, 1398,  324, 1398,  354, 508,  374, 496,  354, 510,  356, 510,  354, 512,  354, 1368,  354, 1368,  354, 512,  354, 512,  324, 544,  354, 482,  352, 540,  354, 1368,  354, 1364,  354, 512,  324, 1400,  354, 1370,  354, 512,  324, 540,  346, 520,  354, 512,  324, 540,  324, 538,  374, 494,  354, 508,  348, 1378,  476, 398,  354, 1366,  348, 522,  348, 1376,  324, 542,  450, 412,  354, 508,  324, 1398,  322, 544,  354, 508,  324, 540,  354, 508,  354, 506,  346, 522,  450, 410,  450, 414,  450, 414,  354, 506,  324, 544,  346, 518,  374, 494,  348, 518,  356, 508,  324, 540,  356, 510,  354, 514,  324, 540,  354, 512,  354, 508,  324, 540,  348, 520,  348, 520,  354, 510,  324, 540,  354, 506,  324, 544,  348, 522,  354, 506,  324, 542,  348, 516,  348, 520,  356, 508,  356, 510,  348, 520,  354, 508,  354, 508,  346, 522,  348, 520,  354, 508,  324, 538,  354, 512,  354, 506,  350, 520,  324, 538,  354, 508,  348, 518,  378, 494,  354, 508,  348, 520,  354, 1368,  348, 520,  354, 1368,  452, 412,  354, 510,  354, 508,  324};  // UNKNOWN CA22CAF
uint16_t irSignal26[583] = {3374, 1780,  326, 1396,  382, 1324,  382, 506,  356, 510,  356, 508,  346, 1376,  324, 538,  356, 510,  326, 1394,  326, 1372,  382, 510,  354, 1368,  356, 508,  356, 506,  326, 1398,  326, 1400,  354, 510,  356, 1366,  354, 1370,  356, 510,  348, 516,  348, 1378,  324, 538,  326, 538,  356, 1328,  396, 506,  326, 544,  354, 508,  356, 510,  356, 510,  356, 510,  354, 508,  326, 538,  348, 516,  348, 520,  346, 518,  348, 524,  356, 504,  326, 544,  356, 508,  324, 540,  356, 508,  326, 540,  326, 546,  356, 510,  354, 1366,  354, 514,  354, 508,  326, 540,  348, 520,  348, 518,  356, 1366,  374, 1352,  354, 508,  356, 508,  380, 492,  326, 540,  356, 1364,  356, 506,  326, 1398,  324, 542,  356, 506,  326, 538,  348, 520,  356, 510,  354, 1368,  354, 1368,  356, 508,  354, 1368,  354, 1364,  356, 508,  324, 540,  356, 508,  348, 518,  348, 520,  356, 508,  354, 506,  354, 508,  324, 1396,  346, 520,  356, 508,  326, 1398,  356, 510,  354, 510,  354, 510,  326, 540,  356, 1364,  350, 524,  354, 508,  326, 542,  356, 508,  356, 508,  356, 508,  326, 542,  326, 546,  354, 508,  324, 542,  326, 542,  348, 518,  356, 510,  324, 538,  356, 514,  326, 538,  326, 538,  356, 508,  326, 538,  356, 508,  326, 540,  356, 512,  348, 520,  356, 506,  348, 516,  324, 538,  348, 518,  350, 516,  326, 542,  326, 538,  356, 510,  326, 538,  326, 542,  354, 508,  356, 510,  354, 510,  356, 510,  354, 510,  324, 540,  354, 508,  326, 538,  324, 538,  324, 540,  346, 518,  346, 522,  356, 506,  356, 508,  348, 518,  324, 540,  356, 1364,  356, 1368,  354, 1366,  324, 1396,  354, 512,  354, 508,  348, 520,  346, 518,  326, 17146,  3488, 1806,  356, 1366,  326, 1400,  354, 512,  354, 508,  324, 542,  346, 1382,  354, 508,  354, 508,  324, 1396,  348, 1376,  346, 516,  326, 1400,  354, 508,  354, 512,  348, 1388,  324, 1398,  356, 512,  354, 1368,  356, 1364,  356, 504,  350, 520,  324, 1400,  356, 512,  356, 508,  324, 1396,  354, 510,  348, 520,  354, 508,  326, 540,  326, 542,  348, 518,  324, 542,  356, 508,  326, 540,  354, 506,  354, 512,  354, 506,  326, 542,  346, 520,  350, 518,  326, 544,  356, 508,  354, 512,  356, 508,  356, 510,  354, 1366,  324, 538,  356, 510,  356, 508,  348, 518,  356, 510,  326, 1398,  324, 1398,  354, 508,  326, 536,  356, 508,  354, 510,  354, 1366,  348, 518,  346, 1380,  346, 524,  358, 504,  326, 544,  356, 506,  326, 540,  354, 1368,  356, 1364,  348, 520,  324, 1400,  324, 1400,  354, 508,  348, 516,  350, 522,  354, 506,  324, 538,  356, 508,  324, 540,  324, 540,  356, 1368,  354, 508,  356, 510,  348, 1376,  356, 508,  348, 518,  356, 510,  326, 542,  356, 1362,  326, 540,  354, 512,  356, 508,  356, 508,  326, 542,  356, 510,  356, 508,  354, 508,  356, 508,  374, 494,  356, 508,  348, 520,  354, 508,  326, 540,  356, 506,  348, 516,  326, 550,  356, 508,  354, 510,  356, 510,  356, 510,  356, 510,  324, 540,  356, 508,  326, 538,  326, 538,  326, 540,  326, 540,  326, 544,  356, 506,  354, 508,  348, 516,  326, 540,  354, 506,  324, 544,  356, 508,  356, 506,  354, 508,  324, 544,  356, 506,  356, 508,  354, 508,  324, 540,  326, 540,  356, 508,  348, 518,  356, 508,  326, 538,  326, 546,  356, 1366,  326, 1400,  354, 1364,  354, 1364,  326, 540,  326, 542,  356, 510,  356, 506,  348};  // UNKNOWN F2D0AA67
uint16_t irSignal24[583] = {3348, 1808,  324, 1400,  356, 1368,  326, 542,  348, 522,  354, 506,  324, 1404,  354, 508,  354, 510,  354, 1366,  346, 1378,  354, 510,  354, 1368,  354, 506,  348, 522,  348, 1382,  356, 1372,  356, 506,  324, 1398,  356, 1370,  356, 510,  354, 508,  356, 1368,  354, 510,  354, 510,  324, 1402,  354, 512,  354, 512,  348, 522,  354, 510,  410, 468,  354, 510,  354, 506,  346, 520,  354, 510,  354, 508,  354, 508,  374, 494,  354, 508,  346, 522,  324, 544,  354, 510,  354, 510,  354, 508,  346, 522,  354, 510,  354, 1368,  376, 496,  354, 508,  354, 512,  354, 512,  354, 508,  356, 1368,  378, 1352,  346, 518,  354, 510,  354, 512,  354, 510,  354, 506,  354, 508,  354, 1372,  352, 508,  354, 512,  354, 508,  356, 508,  354, 512,  354, 1366,  324, 1400,  354, 508,  354, 1368,  354, 1368,  346, 520,  354, 510,  354, 512,  354, 512,  354, 510,  354, 506,  354, 512,  354, 512,  354, 1364,  324, 542,  354, 1368,  354, 510,  354, 1370,  354, 512,  354, 508,  354, 508,  354, 1368,  356, 508,  354, 508,  346, 520,  354, 508,  354, 508,  324, 546,  354, 508,  324, 542,  354, 510,  354, 512,  354, 510,  326, 542,  354, 508,  354, 510,  354, 508,  354, 508,  354, 508,  324, 540,  374, 494,  354, 510,  324, 544,  354, 512,  354, 510,  348, 524,  354, 510,  354, 514,  352, 514,  354, 508,  354, 512,  354, 512,  354, 506,  354, 510,  348, 524,  354, 508,  354, 508,  354, 508,  324, 542,  354, 506,  324, 540,  348, 518,  354, 512,  354, 512,  354, 508,  354, 508,  356, 508,  354, 512,  354, 510,  354, 510,  354, 520,  354, 508,  354, 510,  356, 510,  354, 508,  354, 1370,  324, 540,  354, 510,  356, 510,  354, 17116,  3464, 1828,  356, 1368,  354, 1368,  354, 510,  324, 542,  354, 516,  356, 1364,  354, 510,  354, 514,  356, 1364,  354, 1364,  354, 508,  354, 1368,  356, 510,  324, 542,  348, 1376,  354, 1368,  354, 508,  348, 1376,  346, 1376,  324, 544,  354, 506,  356, 1366,  346, 520,  324, 540,  354, 1368,  354, 512,  354, 508,  348, 522,  354, 520,  354, 510,  354, 510,  354, 512,  354, 510,  354, 508,  348, 520,  354, 510,  346, 522,  324, 544,  346, 518,  324, 552,  354, 508,  354, 510,  354, 512,  354, 510,  354, 512,  354, 1372,  354, 510,  354, 510,  324, 540,  380, 492,  356, 512,  354, 1366,  354, 1370,  354, 510,  354, 508,  354, 510,  354, 514,  354, 514,  354, 508,  354, 1368,  354, 512,  354, 512,  354, 508,  354, 508,  354, 512,  354, 1368,  354, 1366,  354, 508,  346, 1378,  354, 1368,  354, 508,  354, 508,  374, 496,  354, 508,  348, 522,  354, 508,  354, 510,  354, 506,  346, 1380,  354, 506,  348, 1382,  356, 508,  354, 1368,  354, 512,  354, 512,  356, 506,  354, 1366,  354, 512,  354, 508,  354, 510,  354, 508,  354, 506,  348, 522,  356, 512,  356, 508,  354, 508,  356, 510,  354, 512,  354, 506,  354, 508,  354, 510,  354, 516,  354, 508,  356, 508,  354, 508,  356, 510,  354, 508,  356, 510,  354, 514,  346, 522,  356, 506,  348, 518,  354, 508,  326, 540,  348, 518,  324, 542,  354, 508,  354, 510,  354, 510,  354, 512,  354, 508,  354, 510,  354, 510,  354, 510,  354, 512,  354, 510,  354, 508,  356, 508,  354, 508,  326, 540,  324, 540,  324, 544,  356, 506,  354, 508,  348, 518,  356, 510,  354, 506,  324, 544,  354, 508,  356, 506,  354, 1366,  354, 512,  354, 508,  324, 542,  356};  // UNKNOWN 963639DF
//////////////////////////////////////////////////////////////////////
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>
#define SCREEN_WIDTH 128 // OLED display width, in pixels
#define SCREEN_HEIGHT 32 // OLED display height, in pixels
// Declaration for an SSD1306 display connected to I2C (SDA, SCL pins)
#define OLED_RESET     4 // Reset pin # (or -1 if sharing Arduino reset pin)
Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);
////////////////////////////////////////////////////////////////////////
#define DS1307_I2C_ADDRESS 0x68 // the I2C address of Tiny RTC
byte second, minute, hour, dayOfWeek, dayOfMonth, month, year;
// Convert normal decimal numbers to binary coded decimal
byte decToBcd(byte val)
{
return ( (val/10*16) + (val%10) );
}
// Convert binary coded decimal to normal decimal numbers
byte bcdToDec(byte val)
{
return ( (val/16*10) + (val%16) );
}
// Function to set the currnt time, change the second&minute&hour to the right time
void setDateDs1307()
{
second =45;
minute = 5;
hour = 8;
dayOfWeek = 0;//0 = Sunday 1 = Monday 2 = Tuesday 3 = Wednesday 4 = Thursday 5 = Friday 6 = Saturday
dayOfMonth =12;
month =4;
year= 63;
Wire.beginTransmission(DS1307_I2C_ADDRESS);
Wire.write(decToBcd(0));
Wire.write(decToBcd(second)); // 0 to bit 7 starts the clock
Wire.write(decToBcd(minute));
Wire.write(decToBcd(hour)); // If you want 12 hour am/pm you need to set
// bit 6 (also need to change readDateDs1307)
Wire.write(decToBcd(dayOfWeek));
Wire.write(decToBcd(dayOfMonth));
Wire.write(decToBcd(month));
Wire.write(decToBcd(year));
Wire.endTransmission();
}
// Function to gets the date and time from the ds1307 and prints result
void getDateDs1307()
{
// Reset the register pointer
Wire.beginTransmission(DS1307_I2C_ADDRESS);
Wire.write(decToBcd(0));
Wire.endTransmission();
Wire.requestFrom(DS1307_I2C_ADDRESS, 7);
second = bcdToDec(Wire.read() & 0x7f);
minute = bcdToDec(Wire.read());
hour = bcdToDec(Wire.read() & 0x3f); // Need to change this if 12 hour am/pm
dayOfWeek = bcdToDec(Wire.read());
dayOfMonth = bcdToDec(Wire.read());
month = bcdToDec(Wire.read());
year = bcdToDec(Wire.read());
//Serial.print(hour, DEC);
//Serial.print(":");
//Serial.print(minute, DEC);
//Serial.print(":");
//Serial.print(second, DEC);
//Serial.print(" ");
//Serial.print(month, DEC);
//Serial.print("/");
//Serial.print(dayOfMonth, DEC);
//Serial.print("/");
//Serial.print(year,DEC);
//Serial.print(" ");
//Serial.println();
//Serial.print("Day of week:");
}
/////////////////////////////////////////////////////////////////////
int co = 11;
float MQ2gas = 11.0;
int co2 = 1237;
float Carbondioxied = 1237.0;
float t1 = 26.0;
float h1 = 42.0;
float humidityf = 42.0;

float kk = 0.1;

byte addArray[] = { 0xFF, 0x01, 0x86, 0x00, 0x00, 0x00, 0x00, 0x00, 0x79 };
char dataValue[9];
byte dataValuee[3];
String dataString = "";

int print_1s = 0;
int save_1m = 0;
unsigned long time1;

void setup() {
  // initialize serial communications at 9600 bps:
  Serial.begin(115200);
  Serial2.begin(9600);
  Serial3.begin(115200);
  Serial.println("Air_Quality_v5");
  //setDateDs1307(); //Set current time;
  Serial.println("Set current time");
   Serial.print("Initializing SD card...");
  if (!SD.begin(4)) {
    Serial.println("initialization failed!");
    return;
  }
  Serial.println("initialization done.");
    // SSD1306_SWITCHCAPVCC = generate display voltage from 3.3V internally
  if(!display.begin(SSD1306_SWITCHCAPVCC, 0x3C)) { // Address 0x3C for 128x32
    Serial.println(F("SSD1306 allocation failed"));
    for(;;); // Don't proceed, loop forever
  }
  // Show initial display buffer contents on the screen --
  // the library initializes this with an Adafruit splash screen.
  display.display();
  delay(2000); // Pause for 2 seconds
  // Clear the buffer
  display.clearDisplay();
  // Draw a single pixel in white
  display.drawPixel(10, 10, SSD1306_WHITE);
  // Show the display buffer on the screen. You MUST call display() after
  // drawing commands to make them visible on screen!
  display.clearDisplay();
  display.setTextSize(1);             // Normal 1:1 pixel scale
  display.setTextColor(SSD1306_WHITE);        // Draw white text
  display.setCursor(0,0);             // Start at top-left corner
  display.print(" Air_Quality_v4 ");
  display.display();
  delay(2000);
  myFile = SD.open("AIR1.txt", FILE_WRITE);
    if (myFile) {
     //time1 = millis();
      getDateDs1307();//get the time data from tiny RTC
      myFile.print(hour, DEC);
      myFile.print(":");
      myFile.print(minute, DEC);
      myFile.print(":");
      myFile.print(second, DEC);
      myFile.print(" ");
      myFile.print(month, DEC);
      myFile.print("/");
      myFile.print(dayOfMonth, DEC);
      myFile.print("/");
      myFile.print(year,DEC);
     myFile.print("\t");
     myFile.print(MQ2gas);
     myFile.print("\t");
     myFile.print(Carbondioxied);
     myFile.print("\t");
     myFile.print(t1);
     myFile.print("\t");
     myFile.println(humidityf);
     myFile.close();
    }
}

void loop() {
  //Read MH-Z14 CO2 NDIR Gas Sensor 
  Serial2.write(addArray, 9);//Warm-up time 3 min
  Serial2.readBytes(dataValue, 9);
  //Serial3.readBytes(dataValuee, 3);
    if (Serial3.available() >= 3) {
    dataValuee[0] = Serial3.read();
    dataValuee[1] = Serial3.read();
    dataValuee[2] = Serial3.read();
  }
  int resHigh = (int) dataValue[2];
  int resLow  = (int) dataValue[3];
  int pulse = (256*resHigh)+resLow;
  //dataString = String(pulse);
 
 //Grove - Gas Sensor(MQ2)detecting H2, LPG, CH4, CO, Alcohol, Smoke
  co = analogRead(A0);
  //co2 = analogRead(A1);
int V2 = analogRead(A3);
int Vo = map(V2, 0, 1023, 1023, 0);
int hg = analogRead(A2);//analogRead(A2)*5.0*33.33/1023.0
    h1 = ((30.855*(hg/204.6))+8.35);//((30.855*(rhsense/204.6))-11.504);
float R1 = 10900; // value of R1 on board
float logR2, R2;
float c1 = 0.001129148, c2 = 0.000234125, c3 = 0.0000000876741; //steinhart-hart
  R2 = R1 * (1023.0 / (float)Vo - 1.0); //calculate resistance on thermistor
  logR2 = log(R2);
  t1 = (1.0 / (c1 + c2*logR2 + c3*logR2*logR2*logR2)) - 273.15; // temperature in Kelvin
//low pass filter////////////////////////////////////////////
float filter = 0.0253;//0.0253
humidityf = humidityf + (h1 - humidityf)*0.0213;
MQ2gas = MQ2gas + (co - MQ2gas)*0.0153;
Carbondioxied = Carbondioxied + (pulse - Carbondioxied)*filter;
//////////////////////////////////////////////////////////////
if(Carbondioxied < 900){
  kk = 0.01;
}
if(Carbondioxied >= 900 && Carbondioxied < 1000){
  kk = 2.1;
}
if(Carbondioxied >= 1000 && Carbondioxied < 1200){
  kk = 4.25;
}
if(Carbondioxied >= 1200 && Carbondioxied < 1400){
  kk = 9.5;
}
if(Carbondioxied >= 1400 && Carbondioxied < 2000){
  kk = 11.6;
}
if(Carbondioxied >= 2000 && Carbondioxied < 2100){
  kk = 16.8;
}
if(Carbondioxied >= 2100){
  kk = 20.1;
}
uint16_t outputValue4=0;
if(dataValuee[1] >= 55){
  //outputValue4 = dataValuee[1]*300;
}
uint16_t outputValue1 = MQ2gas*183;//133
uint32_t outputValue3 = outputValue1 + (kk*Carbondioxied) + outputValue4;
uint16_t outputValue2 = constrain(outputValue3, 1000, 40000);//fan motor
////////////////////////////////////////////////////////////////Air Mitsu
if(airsend == 0 && hour == 11){//hour
  airsend = 1;
  irsend.sendRaw(irSignal30, sizeof(irSignal30) / sizeof(irSignal30[0]), khz);
}
if(airsend == 1 && hour == 12){//minute
  airsend = 0;
}
if(airsend == 0 && hour == 18){//minute
  airsend = 1;
  irsend.sendRaw(irSignal28, sizeof(irSignal28) / sizeof(irSignal28[0]), khz);
}
if(airsend == 1 && hour == 19){//minute
  airsend = 0;
}
if(airsend == 0 && hour == 20){//minute
  airsend = 1;
  irsend.sendRaw(irSignal26, sizeof(irSignal26) / sizeof(irSignal26[0]), khz);
}
if(airsend == 1 && hour == 21){//minute
  airsend = 0;
}

if(airsend == 0 && hour == 6){//minute
  airsend = 1;
  irsend.sendRaw(irSignal28, sizeof(irSignal28) / sizeof(irSignal28[0]), khz);
}
if(airsend == 1 && hour == 7){//minute
  airsend = 0;
}
if(airsend == 0 && hour == 9){//minute
  airsend = 1;
  irsend.sendRaw(irSignal29, sizeof(irSignal29) / sizeof(irSignal29[0]), khz);
}
if(airsend == 1 && hour == 10){//minute
  airsend = 0;
}
  //irsend.sendRaw(irSignal24, sizeof(irSignal24) / sizeof(irSignal24[0]), khz); 
///////////////////////////////////////////////////////////////
print_1s++;//20
if(print_1s >= 2){
  print_1s = 0;
  //time1 = millis();
  Serial3.write(11);
  Serial3.write(34);
  Serial3.write(outputValue2 >> 8);
  Serial3.write(outputValue2);
  // print the results to the Serial Monitor:
  //Serial.print(co);Serial.print("\t");
  Serial.print("\t");
  Serial.print(minute);Serial.print("\t");
  Serial.print(outputValue2);Serial.print("\t");
  Serial.print(MQ2gas);Serial.print("\t");
  Serial.print(pulse);Serial.print("\t");
  Serial.print(Carbondioxied);Serial.print("\t");
  Serial.print(t1);Serial.print("\t");
  Serial.println(humidityf);

  display.clearDisplay();
  display.setTextSize(1);             // Normal 1:1 pixel scale
  display.setTextColor(SSD1306_WHITE);        // Draw white text
  display.setCursor(0,0);             // Start at top-left corner
  display.print("CO  = ");
  display.println(MQ2gas);
  display.print("CO2 = ");
  display.println(Carbondioxied);
  display.print("H % = ");display.print(dataValuee[1], DEC);display.print("=");
  display.println(humidityf);//dataValue[1]
  display.print("T   = ");display.print(dataValuee[2], DEC);display.print("=");
  display.println(t1);//dataValue[2]
  display.display();
  //Serial.print("co = ");
  //Serial.print(co);
  //Serial.print("\t co2 = ");
  //Serial.print(co2);
  //Serial.print("  ");
  //Serial.print(pulse);
  //Serial.print("\t T1 = ");
  //Serial.print(t1);
  //Serial.print("\t H % = ");
  //Serial.println(h1);
}
save_1m++;
if(save_1m >= 600){
  save_1m = 0;
  myFile = SD.open("AIR3.txt", FILE_WRITE);
    if (myFile) {
     //time1 = millis();
      getDateDs1307();//get the time data from tiny RTC
      myFile.print(hour, DEC);
      myFile.print(":");
      myFile.print(minute, DEC);
      myFile.print(":");
      myFile.print(second, DEC);
      myFile.print(" ");
      myFile.print(month, DEC);
      myFile.print("/");
      myFile.print(dayOfMonth, DEC);
      myFile.print("/");
      myFile.print(year,DEC);
     myFile.print("\t");
     myFile.print(MQ2gas);
     myFile.print("\t");
     myFile.print(Carbondioxied);
     myFile.print("\t");
     myFile.print(t1);
     myFile.print("\t");
     myFile.println(humidityf);
     myFile.close();
    }
}
  // wait 2 milliseconds before the next loop for the analog-to-digital
  // converter to settle after the last reading:
  delay(100);
}
